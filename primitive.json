{
    "id": "3a0bbaa6-b98c-493c-bd06-4b746eced523",
    "version": "1.0.0",
    "name": "Possum",
    "keywords": [
        "Natural Language Processing",
        "NLP",
        "Text Summarization"
    ],
    "source": {
        "name": "Distil",
        "contact": "mailto:steve.kramer@newknowledge.io",
        "uris": [
            "https://github.com/NewKnowledge/possum-d3m-wrapper"
        ]
    },
    "installation": [
        {
            "type": "PIP",
            "package_uri": "git+https://github.com/NewKnowledge/possum-d3m-wrapper.git@3cf5851526
0f658c16b5e3ce3fd3b783b4d8d5d3#egg=PossumD3MWrapper"
        }
    ],
    "python_path": "d3m.primitives.feature_extraction.ibex.Possum",
    "algorithm_types": [
        "LATENT_SEMANTIC_ANALYSIS"
    ],
    "primitive_family": "FEATURE_EXTRACTION",
    "schema": "https://metadata.datadrivendiscovery.org/schemas/v0/primitive.json",
    "original_python_path": "PossumD3MWrapper.wrapper.nk_possum",
    "primitive_code": {
        "class_type_arguments": {
            "Inputs": "d3m.container.pandas.DataFrame",
            "Outputs": "d3m.container.pandas.DataFrame",
            "Hyperparams": "PossumD3MWrapper.wrapper.Hyperparams",
            "Params": "NoneType"
        },
        "interfaces_version": "2019.1.21",
        "interfaces": [
            "transformer.TransformerPrimitiveBase",
            "base.PrimitiveBase"
        ],
        "hyperparams": {
            "algorithm": {
                "type": "d3m.metadata.hyperparams.Enumeration",
                "default": "text_rank",
                "structural_type": "str",
                "semantic_types": [
                    "https://metadata.datadrivendiscovery.org/types/ControlParameter"
                ],
                "description": "type of summarization algorithm to use",
                "values": [
                    "luhn",
                    "edmundson",
                    "lsa",
                    "text_rank",
                    "sum_basic",
                    "kl"
                ]
            },
            "source_type": {
                "type": "d3m.metadata.hyperparams.Enumeration",
                "default": "plain_text",
                "structural_type": "str",
                "semantic_types": [
                    "https://metadata.datadrivendiscovery.org/types/ControlParameter"
                ],
                "description": "type of source documents to be analyzed",
                "values": [
                    "plain_text",
                    "url"
                ]
            },
            "language": {
                "type": "d3m.metadata.hyperparams.Enumeration",
                "default": "english",
                "structural_type": "str",
                "semantic_types": [
                    "https://metadata.datadrivendiscovery.org/types/ControlParameter"
                ],
                "description": "language to use for the NLTK stemming process",
                "values": [
                    "danish",
                    "dutch",
                    "english",
                    "finnish",
                    "french",
                    "german",
                    "hungarian",
                    "italian",
                    "norwegian",
                    "porter",
                    "portuguese",
                    "romanian",
                    "russian",
                    "spanish",
                    "swedish"
                ]
            },
            "nsentences": {
                "type": "d3m.metadata.hyperparams.UniformInt",
                "default": 20,
                "structural_type": "int",
                "semantic_types": [
                    "https://metadata.datadrivendiscovery.org/types/ControlParameter"
                ],
                "description": "number of summary sentences to return",
                "lower": 1,
                "upper": 9223372036854775807,
                "upper_inclusive": false
            }
        },
        "arguments": {
            "hyperparams": {
                "type": "PossumD3MWrapper.wrapper.Hyperparams",
                "kind": "RUNTIME"
            },
            "timeout": {
                "type": "typing.Union[NoneType, float]",
                "kind": "RUNTIME",
                "default": null
            },
            "iterations": {
                "type": "typing.Union[NoneType, int]",
                "kind": "RUNTIME",
                "default": null
            },
            "produce_methods": {
                "type": "typing.Sequence[str]",
                "kind": "RUNTIME"
            },
            "inputs": {
                "type": "d3m.container.pandas.DataFrame",
                "kind": "PIPELINE"
            },
            "params": {
                "type": "NoneType",
                "kind": "RUNTIME"
            }
        },
        "class_methods": {
            "can_accept": {
                "arguments": {
                    "method_name": {
                        "type": "str"
                    },
                    "arguments": {
                        "type": "typing.Dict[str, typing.Union[d3m.metadata.base.Metadata, type]]
"
                    },
                    "hyperparams": {
                        "type": "PossumD3MWrapper.wrapper.Hyperparams"
                    }
                },
                "returns": "typing.Union[NoneType, d3m.metadata.base.DataMetadata]",
                "description": "Returns a metadata object describing the output of a call of ``me
thod_name`` method under\n``hyperparams`` with primitive arguments ``arguments``, if such argumen
ts can be accepted by the method.\nOtherwise it returns ``None`` or raises an exception.\n\nDefau
lt implementation checks structural types of ``arguments`` expected arguments' types\nand ignores
 ``hyperparams``.\n\nBy (re)implementing this method, a primitive can fine-tune which arguments i
t accepts\nfor its methods which goes beyond just structural type checking. For example, a primit
ive might\noperate only on images, so it can accept numpy arrays, but only those with semantic ty
pe\ncorresponding to an image. Or it might check dimensions of an array to assure it operates\non
 square matrix.\n\nPrimitive arguments are a superset of method arguments. This method receives p
rimitive arguments and\nnot just method arguments so that it is possible to implement it without 
a state between calls\nto ``can_accept`` for multiple methods. For example, a call to ``fit`` cou
ld during normal execution\ninfluences what a later ``produce`` call outputs. But during ``can_ac
cept`` call we can directly have\naccess to arguments which would have been given to ``fit`` to p
roduce metadata of the ``produce`` call.\n\nNot all primitive arguments have to be provided, only
 those used by ``fit``, ``set_training_data``,\nand produce methods, and those used by the ``meth
od_name`` method itself.\n\nParameters\n----------\nmethod_name : str\n    Name of the method whi
ch would be called.\narguments : Dict[str, Union[Metadata, type]]\n    A mapping between argument
 names and their metadata objects (for pipeline arguments) or types (for other).\nhyperparams : H
yperparams\n    Hyper-parameters under which the method would be called during regular primitive 
execution.\n\nReturns\n-------\nDataMetadata\n    Metadata object of the method call result, or `
`None`` if arguments are not accepted\n    by the method."
            }
        },
        "instance_methods": {
            "__init__": {
                "kind": "OTHER",
                "arguments": [
                    "hyperparams"
                ],
                "returns": "NoneType"
            },
            "fit": {
                "kind": "OTHER",
                "arguments": [
                    "timeout",
                    "iterations"
                ],
                "returns": "NoneType",
                "description": "A noop.\n\nParameters\n----------\ntimeout : float\n    A maximum
 time this primitive should be fitting during this method call, in seconds.\niterations : int\n  
  How many of internal iterations should the primitive do.\n\nReturns\n-------\nCallResult[None]\
n    A ``CallResult`` with ``None`` value."
            },
            "get_params": {
                "kind": "OTHER",
                "arguments": [],
                "returns": "NoneType",
                "description": "A noop.\n\nReturns\n-------\nParams\n    An instance of parameter
s."
            },
            "multi_produce": {
                "kind": "OTHER",
                "arguments": [
                    "produce_methods",
                    "inputs",
                    "timeout",
                    "iterations"
                ],
                "returns": "d3m.primitive_interfaces.base.MultiCallResult",
                "description": "A method calling multiple produce methods at once.\n\nWhen a prim
itive has multiple produce methods it is common that they might compute the\nsame internal result
s for same inputs but return different representations of those results.\nIf caller is interested
 in multiple of those representations, calling multiple produce\nmethods might lead to recomputin
g same internal results multiple times. To address this,\nthis method allows primitive author to 
implement an optimized version which computes\ninternal results only once for multiple calls of p
roduce methods, but return those different\nrepresentations.\n\nIf any additional method argument
s are added to primitive's produce method(s), they have\nto be added to this method as well. This
 method should accept an union of all arguments\naccepted by primitive's produce method(s) and th
en use them accordingly when computing\nresults.\n\nThe default implementation of this method jus
t calls all produce methods listed in\n``produce_methods`` in order and is potentially inefficien
t.\n\nParameters\n----------\nproduce_methods : Sequence[str]\n    A list of names of produce met
hods to call.\ninputs : Inputs\n    The inputs given to all produce methods.\ntimeout : float\n  
  A maximum time this primitive should take to produce outputs for all produce methods\n    liste
d in ``produce_methods`` argument, in seconds.\niterations : int\n    How many of internal iterat
ions should the primitive do.\n\nReturns\n-------\nMultiCallResult\n    A dict of values for each
 produce method wrapped inside ``MultiCallResult``."
            },
            "produce": {
                "kind": "PRODUCE",
                "arguments": [
                    "inputs"
                ],
                "returns": "d3m.primitive_interfaces.base.CallResult[d3m.container.pandas.DataFra
me]",
                "singleton": false,
                "inputs_across_samples": [],
                "description": "Applies the selected text summarization.\n\nParameters\n---------
-\ninputs : Input pandas dataframe where each row is a string representing a text document or a U
RL (if the source_type parameter is 'url').\n\nReturns\n-------\nOutputs\n    The output is a dat
aframe containing the requested number of summary sentences. The sentence column contains a summa
ry sentence, and the importance column contains the weighted importance as a float number."
            },
            "set_params": {
                "kind": "OTHER",
                "arguments": [
                    "params"
                ],
                "returns": "NoneType",
                "description": "A noop.\n\nParameters\n----------\nparams : Params\n    An instan
ce of parameters."
            },
            "set_training_data": {
                "kind": "OTHER",
                "arguments": [],
                "returns": "NoneType",
                "description": "A noop.\n\nParameters\n----------"
            }
        },
        "class_attributes": {
            "logger": "logging.Logger",
            "metadata": "d3m.metadata.base.PrimitiveMetadata"
        },
        "instance_attributes": {
            "hyperparams": "d3m.metadata.hyperparams.Hyperparams",
            "random_seed": "int",
            "docker_containers": "typing.Dict[str, d3m.primitive_interfaces.base.DockerContainer]
",
            "volumes": "typing.Dict[str, str]"
        }
    },
    "structural_type": "PossumD3MWrapper.wrapper.nk_possum",
    "description": "A base class for primitives which are not fitted at all and can\nsimply produ
ce (useful) outputs from inputs directly. As such they\nalso do not have any state (params).\n\nT
his class is parametrized using only three type variables, ``Inputs``,\n``Outputs``, and ``Hyperp
arams``.\n\nAttributes\n----------\nmetadata : PrimitiveMetadata\n    Primitive's metadata. Avail
able as a class attribute.\nlogger : Logger\n    Primitive's logger. Available as a class attribu
te.\nhyperparams : Hyperparams\n    Hyperparams passed to the constructor.\nrandom_seed : int\n  
  Random seed passed to the constructor.\ndocker_containers : Dict[str, DockerContainer]\n    A d
ict mapping Docker image keys from primitive's metadata to (named) tuples containing\n    contain
er's address under which the container is accessible by the primitive, and a\n    dict mapping ex
posed ports to ports on that address.\nvolumes : Dict[str, str]\n    A dict mapping volume keys f
rom primitive's metadata to file and directory paths\n    where downloaded and extracted files ar
e available to the primitive.",
    "digest": "d63703c203f1d4581de3a3a3cc3c1069c11b7919dcb6e2be60148bfe1cc92a86"
}